<?xml version="1.1" encoding="utf-8" ?>
<xs:schema elementFormDefault="qualified"
           targetNamespace="http://drivebuild.com"
           xmlns="http://drivebuild.com"
           xmlns:xs="http://www.w3.org/2001/XMLSchema">
    <xs:element name="environment">
        <xs:complexType>
            <xs:all>
                <xs:element name="author" type="xs:string"/>
                <xs:element name="name" type="xs:ID"/>
                <xs:element name="version" type="positiveDecimal"/>

                <xs:element name="lanes" minOccurs="0">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="lane" maxOccurs="unbounded">
                                <xs:complexType>
                                    <xs:sequence>
                                        <xs:element name="laneSegment" minOccurs="2" maxOccurs="unbounded">
                                            <xs:complexType>
                                                <xs:attributeGroup ref="positionAttributes"/>
                                                <xs:attribute name="width" type="positiveDecimal" use="required"/>
                                            </xs:complexType>
                                        </xs:element>
                                    </xs:sequence>
                                    <xs:attribute name="id" type="xs:ID"/> <!-- FIXME Exclude offroad as ID -->
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>

                <xs:element name="obstacles" minOccurs="0">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="obstacle" maxOccurs="unbounded">
                                <xs:complexType>
                                    <xs:attribute name="shape" use="required">
                                        <xs:simpleType>
                                            <xs:list itemType="pointTuple"/>
                                        </xs:simpleType>
                                    </xs:attribute>
                                    <xs:attribute name="height" type="positiveDecimal" use="required"/>
                                    <xs:attribute name="id" type="xs:ID"/>
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
            </xs:all>
        </xs:complexType>
    </xs:element>

    <xs:element name="criteria">
        <xs:complexType>
            <xs:all>
                <xs:element name="environment" type="xs:string"/>
                <xs:element name="participants">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="participant" maxOccurs="unbounded">
                                <xs:complexType>
                                    <xs:all>
                                        <xs:element name="initialState">
                                            <xs:complexType>
                                                <xs:attributeGroup ref="movementGroup"/>
                                                <xs:attribute name="orientation" use="required">
                                                    <xs:simpleType>
                                                        <xs:restriction base="xs:decimal">
                                                            <xs:minInclusive value="0"/>
                                                            <xs:maxExclusive value="360"/>
                                                            <xs:fractionDigits value="2"/>
                                                        </xs:restriction>
                                                    </xs:simpleType>
                                                </xs:attribute>
                                                <xs:attribute name="model" use="required">
                                                    <xs:simpleType>
                                                        <xs:restriction base="xs:string">
                                                            <xs:enumeration value="etk800"/>
                                                        </xs:restriction>
                                                    </xs:simpleType>
                                                </xs:attribute>
                                            </xs:complexType>
                                        </xs:element>
                                        <xs:element name="ai" minOccurs="0">
                                            <xs:complexType>
                                                <xs:attribute name="address" type="xs:string" use="required"/>
                                            </xs:complexType>
                                        </xs:element>
                                        <xs:element name="movement" minOccurs="0">
                                            <xs:complexType>
                                                <xs:sequence>
                                                    <xs:element name="waypoint" maxOccurs="unbounded">
                                                        <xs:complexType>
                                                            <xs:attributeGroup ref="movementGroup"/>
                                                            <xs:attributeGroup ref="positionAttributes"/>
                                                            <xs:attribute name="tolerance" type="positiveDecimal"
                                                                          use="required"/>
                                                            <xs:attribute name="id" type="xs:ID"/>
                                                        </xs:complexType>
                                                    </xs:element>
                                                </xs:sequence>
                                            </xs:complexType>
                                        </xs:element>
                                    </xs:all>
                                    <xs:attribute name="id" type="xs:ID" use="required"/> <!-- FIXME Disallow "any" -->
                                </xs:complexType>
                            </xs:element>
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>

                <xs:element name="precondition" type="criterion"/>
                <xs:element name="success" type="criterion"/>
                <xs:element name="failure" type="criterion"/>
            </xs:all>
        </xs:complexType>
    </xs:element>

    <!-- Basic types -->
    <xs:attributeGroup name="positionAttributes">
        <xs:attribute name="x" type="xs:decimal" use="required"/>
        <xs:attribute name="y" type="xs:decimal" use="required"/>
    </xs:attributeGroup>

    <xs:simpleType name="positiveDecimal">
        <xs:restriction base="xs:decimal">
            <xs:minExclusive value="0"/>
            <xs:fractionDigits value="2"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- Types for participants -->
    <xs:simpleType name="aiMode">
        <xs:restriction base="xs:string">
            <xs:enumeration value="manual"/>
            <xs:enumeration value="autonomous"/>
            <xs:enumeration value="training"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:attributeGroup name="movementGroup">
        <xs:attributeGroup ref="positionAttributes"/>
        <xs:attribute name="aiMode" type="aiMode" use="required"/>
        <xs:attribute name="speed" type="xs:nonNegativeInteger"/>
        <xs:attribute name="speedLimit" type="xs:nonNegativeInteger"/>
    </xs:attributeGroup>

    <!-- Connective types -->
    <xs:complexType name="binaryOp">
        <xs:sequence>
            <xs:element ref="criterion" minOccurs="2" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:element name="connective" abstract="true"/>
    <xs:element name="and" substitutionGroup="connective" type="binaryOp"/>
    <xs:element name="or" type="binaryOp"/>
    <xs:element name="not">
        <xs:complexType>
            <xs:all>
                <xs:element ref="criterion"/>
            </xs:all>
        </xs:complexType>
    </xs:element>

    <!-- Criterion types -->
    <xs:complexType name="stateCondition">
        <xs:attribute name="participant" use="required">
            <xs:simpleType>
                <xs:union>
                    <xs:simpleType>
                        <xs:list itemType="xs:IDREF"/>
                    </xs:simpleType>
                    <xs:simpleType>
                        <xs:restriction base="xs:string">
                            <xs:enumeration value="any"/>
                            <!-- Allow "inherit"? => A car that fulfills a certain criterion has to fulfill another -->
                        </xs:restriction>
                    </xs:simpleType>
                </xs:union>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>
    <xs:complexType name="validationConstraint">
        <xs:complexContent>
            <xs:extension base="stateCondition">
                <xs:all>
                    <xs:element ref="criterion"/>
                </xs:all>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:element name="criterion" type="criterion" abstract="true"/>
    <xs:element name="stateCondition" type="stateCondition" abstract="true"/>
    <xs:element name="validationConstraint" type="validationConstraint" abstract="true"/>

    <xs:complexType name="criterion">
        <xs:choice>
            <xs:element ref="connective"/>
            <xs:element ref="stateCondition"/>
        </xs:choice>
    </xs:complexType>

    <!-- Position criterion -->
    <xs:attributeGroup name="position">
        <xs:attribute name="x" type="xs:decimal" use="required"/>
        <xs:attribute name="y" type="xs:decimal" use="required"/>
        <xs:attribute name="tolerance" type="positiveDecimal" use="required"/>
    </xs:attributeGroup>
    <xs:element name="scPosition" substitutionGroup="stateCondition">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="stateCondition">
                    <xs:attributeGroup ref="position"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="vcPosition" substitutionGroup="validationConstraint">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="validationConstraint">
                    <xs:attributeGroup ref="position"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <!-- Area criterion -->
    <xs:simpleType name="pointTuple">
        <xs:restriction base="xs:string">
            <xs:pattern value="\(\d+,\d+\)"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:attributeGroup name="area">
        <xs:attribute name="points" use="required">
            <xs:simpleType>
                <xs:list itemType="pointTuple"/>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:element name="scArea" substitutionGroup="stateCondition">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="stateCondition">
                    <xs:attributeGroup ref="area"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="vcArea" substitutionGroup="validationConstraint">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="validationConstraint">
                    <xs:attributeGroup ref="area"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <!-- Lane criterion -->
    <xs:attributeGroup name="lane">
        <xs:attribute name="onLane" use="required">
            <xs:simpleType>
                <xs:union memberTypes="xs:IDREF">
                    <xs:simpleType>
                        <xs:restriction base="xs:string">
                            <xs:enumeration value="offroad"/>
                        </xs:restriction>
                    </xs:simpleType>
                </xs:union>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>
    <xs:element name="scLane" substitutionGroup="stateCondition">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="stateCondition">
                    <xs:attributeGroup ref="lane"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="vcLane" substitutionGroup="validationConstraint">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="validationConstraint">
                    <xs:attributeGroup ref="lane"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <!-- Speed criterion -->
    <xs:attributeGroup name="speed">
        <xs:attribute name="limit" type="xs:nonNegativeInteger" use="required"/>
    </xs:attributeGroup>
    <xs:element name="scSpeed" substitutionGroup="stateCondition">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="stateCondition">
                    <xs:attributeGroup ref="speed"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="vcSpeed" substitutionGroup="validationConstraint">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="validationConstraint">
                    <xs:attributeGroup ref="speed"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <!-- Damage criterion -->
    <!-- NOTE Currently it is only supported to detect whether a car has been damaged -->
    <xs:element name="scDamage" substitutionGroup="stateCondition">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="stateCondition"/>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="vcDamage" substitutionGroup="validationConstraint">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="validationConstraint"/>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <!-- Time criterion -->
    <xs:attributeGroup name="time">
        <xs:attribute name="from" type="xs:nonNegativeInteger" use="required"/>
        <xs:attribute name="to" type="xs:nonNegativeInteger" use="required"/>
        <!-- <xs:assert test="@from le @to"/> --> <!-- FIXME Introduce assert -->
    </xs:attributeGroup>
    <xs:element name="time" substitutionGroup="validationConstraint">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="validationConstraint">
                    <xs:attributeGroup ref="time"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <!-- Distance criterion -->
    <xs:attributeGroup name="distance">
        <xs:attribute name="to" type="xs:IDREF" use="required"/>
        <xs:attribute name="max" type="positiveDecimal" use="required"/>
    </xs:attributeGroup>
    <xs:element name="scDistance" substitutionGroup="stateCondition">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="stateCondition">
                    <xs:attributeGroup ref="distance"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="vcDistance" substitutionGroup="validationConstraint">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="validationConstraint">
                    <xs:attributeGroup ref="distance"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <!-- TTC criterion -->
    <xs:attributeGroup name="ttc">
        <xs:attribute name="to" type="xs:IDREF" use="required"/>
        <xs:attribute name="max" type="positiveDecimal" use="required"/>
    </xs:attributeGroup>
    <xs:element name="vcTTC" substitutionGroup="validationConstraint">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="validationConstraint">
                    <xs:attributeGroup ref="ttc"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <!-- Output criterion -->
    <xs:attributeGroup name="output">
        <xs:attribute name="pattern" type="xs:string" use="required"/>
        <!-- FIXME Any way to force a regex as a type? -->
    </xs:attributeGroup>
    <xs:element name="scOutput" substitutionGroup="stateCondition">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="stateCondition">
                    <xs:attributeGroup ref="output"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="vcOutput" substitutionGroup="validationConstraint">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="validationConstraint">
                    <xs:attributeGroup ref="output"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>

    <!-- Light criterion -->
    <xs:attributeGroup name="light">
        <xs:attribute name="state" use="required">
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <!-- NOTE Lights were found in: -->
                    <!-- [...]/trunk/lua/vehicle/extensions/outgauge.lua -->
                    <!-- [...]/trunk/lua/vehicle/electrics.lua -->

                    <!-- Dash/show lights -->
                    <xs:enumeration value="lowBeam"/>
                    <xs:enumeration value="fullBeam"/>
                    <xs:enumeration value="handbrake"/>
                    <xs:enumeration value="signalL"/>
                    <xs:enumeration value="signalR"/>
                    <xs:enumeration value="fogLights"/>

                    <!-- TODO Do the following exist in BeamNG? -->
                    <!--<xs:enumeration value="lowBeam"/>
                    <xs:enumeration value="highBeam"/>
                    <xs:enumeration value="blinkerRight"/>
                    <xs:enumeration value="blinkerLeft"/>
                    <xs:enumeration value="backupLight"/>
                    <xs:enumeration value="rearFogLamp"/>
                    <xs:enumeration value="frontFogLamp"/>-->
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:attributeGroup>

    <!-- Waypoint criterion -->
    <xs:attributeGroup name="waypoint">
        <xs:attribute name="waypoint" type="xs:IDREF"/>
    </xs:attributeGroup>
    <xs:element name="scWaypoint" substitutionGroup="stateCondition">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="stateCondition">
                    <xs:attributeGroup ref="waypoint"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="vcWaypoint" substitutionGroup="validationConstraint">
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="validationConstraint">
                    <xs:attributeGroup ref="waypoint"/>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
</xs:schema>